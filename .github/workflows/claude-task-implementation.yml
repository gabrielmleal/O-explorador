name: Claude Task Implementation

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]

jobs:
  claude-implementation:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude') && !contains(github.event.issue.labels.*.name, 'sequential-context'))
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: write
    
    steps:
      - name: Debug workflow trigger
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 Claude Task Implementation Workflow Triggered');
            console.log(`   - Event: ${context.eventName}`);
            console.log(`   - Action: ${context.payload.action || 'N/A'}`);
            
            if (context.eventName === 'issues') {
              console.log(`   - Issue labels: ${JSON.stringify(context.payload.issue.labels.map(l => l.name))}`);
              console.log(`   - Has sequential-context label: ${context.payload.issue.labels.some(l => l.name === 'sequential-context')}`);
              console.log(`   - Issue body contains @claude: ${context.payload.issue.body.includes('@claude')}`);
              
              if (context.payload.issue.labels.some(l => l.name === 'sequential-context')) {
                console.log('⚠️ This is a sequential-context issue - task implementation should be handled by sequential workflows');
              }
            } else if (context.eventName === 'issue_comment') {
              console.log(`   - Comment contains @claude: ${context.payload.comment.body.includes('@claude')}`);
              console.log(`   - Comment created for sequential task execution`);
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}

      - name: Setup Git Token for Authentication
        uses: fregante/setup-git-token@v1
        with:
          token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}

      - name: Detect sequential task context and branch
        id: detect-context
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check if this is a sequential task by looking for context in the comment or issue
            let isSequentialTask = false;
            let targetBranch = null;
            let sequentialContext = null;
            
            try {
              // First, try to detect if this is part of sequential execution
              // Check for current-task-context.json that might have been created by sequential-task-executor
              if (fs.existsSync('current-task-context.json')) {
                console.log('🔍 Found existing current-task-context.json - this is likely a sequential task');
                const taskContext = JSON.parse(fs.readFileSync('current-task-context.json', 'utf8'));
                isSequentialTask = true;
                targetBranch = taskContext.currentBranch;
                sequentialContext = taskContext;
                console.log(`   - Sequential branch: ${targetBranch}`);
              } else {
                console.log('ℹ️ No current-task-context.json found - checking for sequential context in comment/issue');
                
                // Look for sequential context in the triggering comment/issue
                let triggerText = '';
                if (context.eventName === 'issue_comment') {
                  triggerText = context.payload.comment.body;
                } else if (context.eventName === 'issues') {
                  triggerText = context.payload.issue.body;
                }
                
                // Look for sequential context indicators in the text
                const sequentialIndicators = [
                  'Task \\d+ of \\d+',
                  'SEQUENTIAL task execution',
                  'Current Branch: `([^`]+)`',
                  'branch `([^`]+)` which was created'
                ];
                
                for (const pattern of sequentialIndicators) {
                  const match = triggerText.match(new RegExp(pattern, 'i'));
                  if (match) {
                    console.log(`🎯 Found sequential indicator: ${pattern}`);
                    isSequentialTask = true;
                    
                    // Try to extract branch name from the text
                    const branchMatch = triggerText.match(/Current Branch: `([^`]+)`/) || 
                                       triggerText.match(/branch `([^`]+)` which was created/) ||
                                       triggerText.match(/working on branch `([^`]+)`/);
                    
                    if (branchMatch && branchMatch[1]) {
                      targetBranch = branchMatch[1];
                      console.log(`   - Extracted branch: ${targetBranch}`);
                    }
                    break;
                  }
                }
              }
              
              // Set outputs for next steps
              core.setOutput('is_sequential_task', isSequentialTask.toString());
              core.setOutput('target_branch', targetBranch || '');
              core.setOutput('has_context', sequentialContext !== null ? 'true' : 'false');
              
              console.log(`✅ Context detection complete:`);
              console.log(`   - Is sequential task: ${isSequentialTask}`);
              console.log(`   - Target branch: ${targetBranch || 'default'}`);
              console.log(`   - Has context: ${sequentialContext !== null}`);
              
            } catch (error) {
              console.log('❌ Error during context detection:', error.message);
              console.log('🔄 Falling back to standalone mode');
              
              core.setOutput('is_sequential_task', 'false');
              core.setOutput('target_branch', '');
              core.setOutput('has_context', 'false');
            }

      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          trigger_phrase: '@claude'
          base_branch: ${{ steps.detect-context.outputs.target_branch || github.event.repository.default_branch }}
          timeout_minutes: 30
          use_bedrock: false
          use_vertex: false

      - name: Handle sequential task completion
        if: always()
        uses: actions/github-script@v7
        env:
          WORKFLOW_TRIGGER_TOKEN: ${{ secrets.WORKFLOW_TRIGGER_TOKEN }}
          IS_SEQUENTIAL_TASK: ${{ steps.detect-context.outputs.is_sequential_task }}
          TARGET_BRANCH: ${{ steps.detect-context.outputs.target_branch }}
          HAS_CONTEXT: ${{ steps.detect-context.outputs.has_context }}
        with:
          github-token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}
          script: |
            const path = require('path');
            const fs = require('fs');
            
            try {
              const isSequentialTask = process.env.IS_SEQUENTIAL_TASK === 'true';
              const targetBranch = process.env.TARGET_BRANCH;
              const hasContext = process.env.HAS_CONTEXT === 'true';
              
              console.log(`🔍 Sequential task completion check:`);
              console.log(`   - Is sequential task: ${isSequentialTask}`);
              console.log(`   - Target branch: ${targetBranch || 'none'}`);
              console.log(`   - Has context: ${hasContext}`);
              
              if (!isSequentialTask) {
                console.log('ℹ️ Not a sequential task - skipping sequential completion handling');
                return;
              }
              
              // Check if this is part of a sequential execution
              const currentTaskContextFile = 'current-task-context.json';
              
              if (!fs.existsSync(currentTaskContextFile)) {
                console.log('❌ Sequential task detected but no context file found');
                console.log('🔍 This might indicate Claude Code Action ran on wrong branch');
                console.log(`   - Expected branch: ${targetBranch}`);
                console.log(`   - Context file missing: ${currentTaskContextFile}`);
                
                // Try to provide helpful error information
                const currentBranch = await github.rest.repos.getBranch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: context.sha
                }).catch(() => null);
                
                console.log(`   - Current HEAD: ${context.sha}`);
                
                core.setFailed('Sequential task context file not found. Claude Code Action may have used wrong branch.');
                return;
              }
              
              console.log('✅ Sequential task context found - handling completion');
              
              const taskContext = JSON.parse(fs.readFileSync(currentTaskContextFile, 'utf8'));
              console.log(`📋 Processing completion for Task ${taskContext.taskIndex + 1}: ${taskContext.taskData.title}`);
              console.log(`🌿 Task context branch: ${taskContext.currentBranch}`);
              console.log(`🎯 Detected branch: ${targetBranch}`);
              
              // Verify branch consistency
              if (targetBranch && taskContext.currentBranch !== targetBranch) {
                console.log(`⚠️ Branch mismatch detected:`);
                console.log(`   - Task context branch: ${taskContext.currentBranch}`);
                console.log(`   - Detected branch: ${targetBranch}`);
              }
              
              // Import the task completion handler
              const executeSequentialTask = require(path.join(process.cwd(), 'scripts', 'execute-sequential-task.js'));
              
              // Handle task completion (PR creation and next task triggering)
              const result = await executeSequentialTask.handleTaskCompletion({ 
                github, 
                context, 
                core, 
                taskContext 
              });
              
              if (result.status === 'completed') {
                console.log(`✅ Task ${taskContext.taskIndex + 1} completed successfully`);
                console.log(`📝 Created PR #${result.prNumber}`);
                
                core.setOutput('pr_number', result.prNumber);
                core.setOutput('task_status', 'completed');
                
              } else if (result.status === 'no-changes') {
                console.log(`⚠️ Task ${taskContext.taskIndex + 1} completed with no changes needed`);
                core.setOutput('task_status', 'no-changes');
                
              } else if (result.status === 'all_completed') {
                console.log('🎉 All sequential tasks have been completed!');
                core.setOutput('task_status', 'all_completed');
                core.setOutput('total_tasks_completed', result.tasksCompleted);
              }
              
            } catch (error) {
              console.log('❌ Sequential task completion handling failed:', error.message);
              console.log('🔍 Full error:', error);
              
              // For sequential tasks, we want to mark the task as failed
              try {
                if (fs.existsSync('current-task-context.json')) {
                  const taskContext = JSON.parse(fs.readFileSync('current-task-context.json', 'utf8'));
                  const { findStateComment } = require('./scripts/setup-sequential-tasks');
                  
                  // Load state and mark current task as failed
                  const stateResult = await findStateComment(github, context.repo.owner, context.repo.repo, taskContext.parentIssue);
                  if (stateResult) {
                    const sequentialState = stateResult.state;
                    const currentTaskIndex = taskContext.taskIndex;
                    
                    if (sequentialState.tasks[currentTaskIndex]) {
                      sequentialState.tasks[currentTaskIndex].status = 'failed';
                      sequentialState.tasks[currentTaskIndex].error_message = error.message;
                      sequentialState.tasks[currentTaskIndex].completed_at = new Date().toISOString();
                      sequentialState.status = 'failed';
                      sequentialState.updated_at = new Date().toISOString();
                      
                      const { createStateCommentBody } = require('./scripts/setup-sequential-tasks');
                      await github.rest.issues.updateComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: stateResult.comment_id,
                        body: createStateCommentBody(sequentialState)
                      });
                      
                      console.log(`❌ Marked Task ${currentTaskIndex + 1} as failed in sequential state`);
                    }
                  }
                }
              } catch (stateError) {
                console.log('Failed to update failed state:', stateError.message);
              }
              
              // Don't fail the workflow for non-sequential tasks
              if (fs.existsSync('current-task-context.json')) {
                core.setFailed(`Sequential task completion failed: ${error.message}`);
              } else {
                console.log('⚠️ Task completion error in non-sequential context - continuing');
              }
            }

      - name: Create sequential progress update
        if: always() && steps.detect-context.outputs.is_sequential_task == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              console.log('📊 Creating sequential progress update');
              
              // Verify context file exists (should exist if is_sequential_task is true)
              if (!fs.existsSync('current-task-context.json')) {
                console.log('❌ Sequential task flagged but no context file found');
                console.log('🔍 This indicates a branch coordination issue');
                return;
              }
              
              const taskContext = JSON.parse(fs.readFileSync('current-task-context.json', 'utf8'));
              const { findStateComment } = require('./scripts/setup-sequential-tasks');
              
              console.log(`📊 Creating progress update for sequential Task ${taskContext.taskIndex + 1}`);
              
              // Load current state from issue comments
              const stateResult = await findStateComment(github, context.repo.owner, context.repo.repo, taskContext.parentIssue);
              
              if (stateResult) {
                const sequentialState = stateResult.state;
                const completedTasks = sequentialState.tasks.filter(t => t.status === 'completed' || t.status === 'no-changes').length;
                const totalTasks = sequentialState.tasks.length;
                const currentTaskIndex = sequentialState.current_task_index || 0;
                const currentTask = sequentialState.tasks[currentTaskIndex];
                
                let statusMessage;
                if (sequentialState.status === 'completed') {
                  statusMessage = `🎉 **All tasks completed!** Final progress: ${totalTasks}/${totalTasks} tasks finished`;
                } else if (sequentialState.status === 'failed') {
                  statusMessage = `❌ **Task failed:** ${currentTask?.title || 'Unknown task'} (Task ${currentTaskIndex + 1})`;
                } else {
                  const nextTaskIndex = currentTaskIndex + 1;
                  if (nextTaskIndex < totalTasks) {
                    statusMessage = `⚡ **Progress Update:** Task ${currentTaskIndex + 1} completed, Task ${nextTaskIndex + 1} starting next`;
                  } else {
                    statusMessage = `✅ **Final Task:** Task ${currentTaskIndex + 1} was the last task`;
                  }
                }
                
                const progressBars = sequentialState.tasks.map((task, i) => {
                  const status = task.status;
                  const icon = status === 'completed' ? '✅' : 
                             status === 'no-changes' ? '⚠️' : 
                             status === 'failed' ? '❌' : 
                             status === 'in-progress' ? '🔄' : '⏳';
                  const prLink = task.pr_number ? ` ([PR #${task.pr_number}](https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${task.pr_number}))` : '';
                  return `- ${icon} **Task ${i + 1}**: ${task.title}${prLink}`;
                }).join('\n');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: taskContext.parentIssue,
                  body: [
                    '## 📊 Sequential Task Progress Update',
                    '',
                    statusMessage,
                    '',
                    `**Current Status:** ${completedTasks}/${totalTasks} tasks completed`,
                    '',
                    '### Task Status:',
                    '',
                    progressBars,
                    '',
                    '---',
                    '*Updated automatically by Claude Task Implementation*'
                  ].join('\n')
                });
                
                console.log('✅ Progress update created');
              } else {
                console.log('⚠️ No sequential state found for progress update');
              }
            } catch (error) {
              console.log('Failed to create progress update:', error.message);
            }

      - name: Upload implementation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-implementation-${{ github.run_id }}-artifacts
          path: |
            current-task-context.json
          retention-days: 30