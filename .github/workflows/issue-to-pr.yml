name: Issue to PR Automation

on:
  issues:
    types: [opened, labeled]

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  create-pr-from-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'auto-implement')
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Claude Code CLI
        run: |
          npm install -g claude-code
      
      - name: Generate branch name
        id: branch
        run: |
          # Create branch name from issue title
          BRANCH_NAME="claude/issue-${{ github.event.issue.number }}-$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-' | cut -c1-50)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create and checkout new branch
          git config user.name "Claude Code Bot"
          git config user.email "claude-bot@example.com"
          git checkout -b "$BRANCH_NAME"
      
      - name: Implement issue with Claude Code
        id: implement
        continue-on-error: true
        run: |
          # Read any CLAUDE.md for context
          CONTEXT=""
          if [ -f "CLAUDE.md" ]; then
            CONTEXT="$(cat CLAUDE.md)"
          fi
          
          # Construct the prompt
          PROMPT="You are implementing a GitHub issue. Here's the task:
          
          Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          
          Description:
          ${{ github.event.issue.body }}
          
          Project Context:
          $CONTEXT
          
          Please implement this task completely, creating or modifying all necessary files.
          Follow best practices and ensure the code is production-ready.
          If tests are needed, create them.
          Make sure to handle edge cases and add appropriate error handling."
          
          # Execute Claude Code with OAuth token and specify Claude Sonnet 4
          claude-code --query "$PROMPT" \
            --output-mode text \
            --turns 3 \
            --model claude-sonnet-4-20250514 \
            --yes \
            > implementation.log 2>&1
          
          # Check if any files were modified
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      
      - name: Commit changes
        if: steps.implement.outputs.changes_made == 'true'
        run: |
          git add -A
          git commit -m "Implement #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          
          This PR implements the requirements described in issue #${{ github.event.issue.number }}.
          
          Generated with Claude Code
          Co-authored-by: Claude <claude@anthropic.com>"
      
      - name: Push branch
        if: steps.implement.outputs.changes_made == 'true'
        run: |
          git push origin ${{ steps.branch.outputs.branch_name }}
      
      - name: Create Pull Request
        if: steps.implement.outputs.changes_made == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const implementationLog = fs.readFileSync('implementation.log', 'utf8');
            
            // Extract summary from implementation log (first few lines)
            const logLines = implementationLog.split('\n');
            const summary = logLines.slice(0, 10).join('\n');
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Claude] ${context.payload.issue.title}`,
              head: '${{ steps.branch.outputs.branch_name }}',
              base: 'main',
              body: `## Summary
            
            This PR implements the requirements from #${context.payload.issue.number}.
            
            ### Implementation Details
            
            ${summary}...
            
            ### Related Issue
            
            Closes #${context.payload.issue.number}
            
            ### Testing
            
            - [ ] Code has been tested locally
            - [ ] All tests pass
            - [ ] No linting errors
            
            ### Claude Code Implementation Log
            
            <details>
            <summary>View full implementation details</summary>
            
            \`\`\`
            ${implementationLog}
            \`\`\`
            
            </details>
            
            ---
            *This PR was automatically generated by Claude Code in response to issue #${context.payload.issue.number}*
            
            cc @claude for any adjustments needed`
            });
            
            // Link PR to issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `ü§ñ Claude has created PR #${pr.number} to implement this issue.`
            });
            
            // Add labels to PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['claude-generated', 'needs-review']
            });
      
      - name: Handle no changes case
        if: steps.implement.outputs.changes_made == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `‚ö†Ô∏è Claude Code attempted to implement this issue but no changes were needed or the implementation was not successful. 
              
              Please review the issue description and ensure it contains clear, implementable requirements.`
            });