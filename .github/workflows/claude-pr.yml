name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]


jobs:
  claude-pr-response:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '@claude') &&
       !contains(join(github.event.issue.labels.*.name, ','), 'sequential-task')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@claude') &&
       !contains(join(github.event.pull_request.labels.*.name, ','), 'sequential-task'))
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number;
            if (context.eventName === 'issue_comment') {
              pr_number = context.payload.issue.number;
            } else {
              pr_number = context.payload.pull_request.number;
            }
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            core.setOutput('pr_number', pr_number);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            return pr;
      
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_details.outputs.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}
      
      - name: Extract Claude command
        id: extract_command
        run: |
          # Extract the command after @claude mention
          COMMENT_BODY="${{ github.event.comment.body }}"
          CLAUDE_COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@claude\s*//p')
          echo "command=$CLAUDE_COMMAND" >> $GITHUB_OUTPUT
      
      - name: Get PR diff
        id: get_diff
        run: |
          git diff origin/${{ steps.pr_details.outputs.base_ref }}..HEAD > pr_diff.txt
          
          # Also get list of changed files
          git diff --name-only origin/${{ steps.pr_details.outputs.base_ref }}..HEAD > changed_files.txt
      
      - name: Execute Claude command
        id: claude_response
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          timeout_minutes: 15
          custom_instructions: |
            You are helping with a pull request. Here's the context:
            
            PR #${{ steps.pr_details.outputs.pr_number }}
            
            Read CLAUDE.md for project context and guidelines.
            
            User request from PR comment: ${{ steps.extract_command.outputs.command }}
            
            INSTRUCTIONS:
            1. Read CLAUDE.md for project context
            2. Examine the current PR changes to understand what's being worked on
            3. Address the user's request from the PR comment
            4. If code changes are needed, make them directly
            5. Follow project conventions and best practices
            6. Be helpful and thorough but concise
            
            The user mentioned you in a PR comment with this request: "${{ steps.extract_command.outputs.command }}"
            
            Please help with their request. If you need to make changes to code, do so directly.
          allowed_tools: "Read,Write,Edit,MultiEdit,Glob,Grep,Bash(git diff*),Bash(git status*),Bash(npm test*),Bash(npm run*),Bash(yarn test*),Bash(python -m pytest*)"
          disallowed_tools: "Bash(rm *),Bash(sudo *),Bash(curl *),Bash(wget *),Bash(dd *),Bash(git push*),Bash(git reset --hard*)"
      
      - name: Check for changes and commit
        id: check_changes
        run: |
          # Check if any files were modified by Claude Code Action
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            
            # Configure git and commit changes
            git config user.name "Claude Code Bot"
            git config user.email "claude-bot@example.com"
            
            git add -A
            git commit -m "Apply Claude's suggestions from PR comment

            Responding to: ${{ steps.extract_command.outputs.command }}

            ðŸ¤– Generated with Claude Code Action

            Co-authored-by: Claude <noreply@anthropic.com>"
            
            git push origin ${{ steps.pr_details.outputs.head_ref }}
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Post response comment
        uses: actions/github-script@v7
        with:
          script: |
            const changesMade = '${{ steps.check_changes.outputs.changes_made }}' === 'true';
            
            let comment = '## ðŸ¤– Claude Response\n\n';
            
            if (changesMade) {
              comment += 'âœ… **Changes have been applied to this PR**\n\n';
              comment += 'Claude Code has analyzed your request and made the necessary code changes. ';
              comment += 'The changes have been committed to this PR branch.\n\n';
            } else {
              comment += 'Claude Code has analyzed your request. ';
              comment += 'No code changes were needed or made based on your request.\n\n';
            }
            
            comment += `**Your request**: ${process.env.CLAUDE_COMMAND}\n\n`;
            comment += '---\n';
            comment += '*ðŸ¤– Generated with [Claude Code](https://claude.ai/code)*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_details.outputs.pr_number }},
              body: comment
            });
        env:
          CLAUDE_COMMAND: ${{ steps.extract_command.outputs.command }}
      
      - name: Add reaction to original comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });