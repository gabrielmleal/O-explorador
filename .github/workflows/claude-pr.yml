name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

env:
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  claude-pr-response:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number;
            if (context.eventName === 'issue_comment') {
              pr_number = context.payload.issue.number;
            } else {
              pr_number = context.payload.pull_request.number;
            }
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            core.setOutput('pr_number', pr_number);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            return pr;
      
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_details.outputs.head_ref }}
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Claude Code CLI
        run: |
          npm install -g claude-code
      
      - name: Extract Claude command
        id: extract_command
        run: |
          # Extract the command after @claude mention
          COMMENT_BODY="${{ github.event.comment.body }}"
          CLAUDE_COMMAND=$(echo "$COMMENT_BODY" | sed -n 's/.*@claude\s*//p')
          echo "command=$CLAUDE_COMMAND" >> $GITHUB_OUTPUT
      
      - name: Get PR diff
        id: get_diff
        run: |
          git diff origin/${{ steps.pr_details.outputs.base_ref }}..HEAD > pr_diff.txt
          
          # Also get list of changed files
          git diff --name-only origin/${{ steps.pr_details.outputs.base_ref }}..HEAD > changed_files.txt
      
      - name: Execute Claude command
        id: claude_response
        continue-on-error: true
        run: |
          # Read any CLAUDE.md for context
          CONTEXT=""
          if [ -f "CLAUDE.md" ]; then
            CONTEXT="$(cat CLAUDE.md)"
          fi
          
          # Read PR diff for context
          PR_DIFF="$(cat pr_diff.txt | head -5000)"  # Limit diff size
          CHANGED_FILES="$(cat changed_files.txt)"
          
          # Construct the prompt
          PROMPT="You are helping with a pull request. Here's the context:
          
          PR #${{ steps.pr_details.outputs.pr_number }}
          
          Changed files:
          $CHANGED_FILES
          
          Recent changes diff:
          \`\`\`diff
          $PR_DIFF
          \`\`\`
          
          Project Context:
          $CONTEXT
          
          User request: ${{ steps.extract_command.outputs.command }}
          
          Please help with the requested changes or answer the question.
          If code changes are needed, make them directly.
          Be concise but thorough."
          
          # Execute Claude Code with OAuth token and specify Claude Sonnet 4
          claude-code --query "$PROMPT" \
            --output-mode text \
            --turns 2 \
            --model claude-sonnet-4-20250514 \
            --yes \
            > claude_response.log 2>&1
          
          # Check if any files were modified
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      
      - name: Commit and push changes
        if: steps.claude_response.outputs.changes_made == 'true'
        run: |
          git config user.name "Claude Code Bot"
          git config user.email "claude-bot@example.com"
          
          git add -A
          git commit -m "Apply Claude's suggestions from PR comment
          
          Responding to: ${{ steps.extract_command.outputs.command }}
          
          Co-authored-by: Claude <claude@anthropic.com>"
          
          git push origin ${{ steps.pr_details.outputs.head_ref }}
      
      - name: Post response comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('claude_response.log', 'utf8');
            const changesMade = '${{ steps.claude_response.outputs.changes_made }}' === 'true';
            
            let comment = '## ðŸ¤– Claude Response\n\n';
            
            if (changesMade) {
              comment += 'âœ… **Changes have been applied to this PR**\n\n';
            }
            
            // Format the response (limit length for comment)
            const maxLength = 50000;
            let formattedResponse = response;
            if (response.length > maxLength) {
              formattedResponse = response.substring(0, maxLength) + '\n\n... (response truncated)';
            }
            
            comment += formattedResponse;
            
            comment += '\n\n---\n';
            comment += '*Powered by Claude Code*';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr_details.outputs.pr_number }},
              body: comment
            });
      
      - name: Add reaction to original comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });