name: Sequential Task Executor

on:
  repository_dispatch:
    types: 
      - execute-sequential-task
  workflow_dispatch:
    inputs:
      task_index:
        description: 'Task index to execute (0-based)'
        required: true
        default: '0'
        type: string
      previous_branch:
        description: 'Previous branch to base from'
        required: false
        default: 'main'
        type: string
      parent_issue:
        description: 'Parent issue number'
        required: true
        type: string

jobs:
  execute-task:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}

      - name: Prepare task execution environment
        id: prepare-task
        uses: actions/github-script@v7
        env:
          WORKFLOW_TRIGGER_TOKEN: ${{ secrets.WORKFLOW_TRIGGER_TOKEN }}
        with:
          github-token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}
          script: |
            const path = require('path');
            const executeSequentialTask = require(path.join(process.cwd(), 'scripts', 'execute-sequential-task.js'));
            
            try {
              // Debug information
              console.log('üîç Workflow Debug Information:');
              console.log(`   - Event name: ${context.eventName}`);
              console.log(`   - Action: ${context.payload.action || 'N/A'}`);
              console.log(`   - Full payload:`, JSON.stringify(context.payload, null, 2));
              
              // Handle both repository_dispatch and workflow_dispatch events
              if (context.eventName === 'repository_dispatch') {
                console.log('üì® Triggered by repository_dispatch event');
                console.log(`   - Event type: ${context.payload.action}`);
                console.log(`   - Client payload:`, context.payload.client_payload);
              } else if (context.eventName === 'workflow_dispatch') {
                console.log('üñ±Ô∏è Triggered by manual workflow_dispatch');
                console.log(`   - Inputs:`, context.payload.inputs);
                
                // For workflow_dispatch, we need to create a mock client_payload from inputs
                context.payload.client_payload = {
                  task_index: parseInt(context.payload.inputs.task_index || '0'),
                  previous_branch: context.payload.inputs.previous_branch || 'main',
                  parent_issue: parseInt(context.payload.inputs.parent_issue),
                  trigger_source: 'manual_workflow_dispatch'
                };
                console.log('   - Created client_payload from inputs:', context.payload.client_payload);
              } else {
                throw new Error(`Unsupported event type: ${context.eventName}. Expected repository_dispatch or workflow_dispatch.`);
              }
              
              const taskContext = await executeSequentialTask({ github, context, core });
              
              console.log('üìã Task execution context prepared:');
              console.log(`   - Task: ${taskContext.taskData.title}`);
              console.log(`   - Index: ${taskContext.taskIndex + 1}/${taskContext.totalTasks}`);
              console.log(`   - Branch: ${taskContext.currentBranch}`);
              console.log(`   - Base: ${taskContext.previousBranch}`);
              
              // Set outputs for next steps
              core.setOutput('task_title', taskContext.taskData.title);
              core.setOutput('task_index', taskContext.taskIndex.toString());
              core.setOutput('task_number', (taskContext.taskIndex + 1).toString());
              core.setOutput('total_tasks', taskContext.totalTasks.toString());
              core.setOutput('current_branch', taskContext.currentBranch);
              core.setOutput('previous_branch', taskContext.previousBranch);
              core.setOutput('task_prepared', 'true');
              
            } catch (error) {
              console.log('‚ùå Task preparation failed:', error.message);
              console.log('üîç Full error details:', error);
              core.setFailed(`Task preparation failed: ${error.message}`);
            }

      - name: Verify branch availability
        if: steps.prepare-task.outputs.task_prepared == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}
          script: |
            const currentBranch = '${{ steps.prepare-task.outputs.current_branch }}';
            
            // Wait a moment for branch to be available on remote
            console.log(`üîç Verifying branch ${currentBranch} is available on remote...`);
            
            let retries = 0;
            const maxRetries = 10;
            
            while (retries < maxRetries) {
              try {
                await github.rest.repos.getBranch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: currentBranch
                });
                
                console.log(`‚úÖ Branch ${currentBranch} confirmed available on remote`);
                break;
                
              } catch (error) {
                retries++;
                console.log(`‚è≥ Branch not yet available (attempt ${retries}/${maxRetries}), waiting 2s...`);
                
                if (retries >= maxRetries) {
                  throw new Error(`Branch ${currentBranch} not available after ${maxRetries} attempts: ${error.message}`);
                }
                
                // Wait 2 seconds before retry
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            }

      - name: Trigger Claude Code implementation via issue comment
        if: steps.prepare-task.outputs.task_prepared == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN || github.token }}
          script: |
            try {
              // Get parent issue from the task context
              const parentIssue = context.payload.client_payload?.parent_issue;
              
              if (!parentIssue) {
                throw new Error('Parent issue required to trigger Claude Code implementation');
              }
              
              // Create a comment that triggers Claude Code Action
              const taskTitle = '${{ steps.prepare-task.outputs.task_title }}';
              const taskNumber = '${{ steps.prepare-task.outputs.task_number }}';
              const totalTasks = '${{ steps.prepare-task.outputs.total_tasks }}';
              const currentBranch = '${{ steps.prepare-task.outputs.current_branch }}';
              const previousBranch = '${{ steps.prepare-task.outputs.previous_branch }}';
              
              console.log(`ü§ñ Triggering Claude Code Action for branch: ${currentBranch}`);
              
              const claudeInstructions = '@claude You are implementing Task ' + taskNumber + ' of ' + totalTasks + ' in a SEQUENTIAL task execution system.\\n\\n' +
                '**CRITICAL CONTEXT**: This task builds on previous tasks changes. You are currently working on branch `' + currentBranch + '` which was created from `' + previousBranch + '`.\\n\\n' +
                '**TASK TO IMPLEMENT**: ' + taskTitle + '\\n\\n' +
                '**SEQUENTIAL EXECUTION CONTEXT**:\\n' +
                '- Task Index: ' + taskNumber + '/' + totalTasks + '\\n' +
                '- Current Branch: `' + currentBranch + '`\\n' +
                '- Base Branch: `' + previousBranch + '`\\n' +
                '- Task Context: Available in `current-task-context.json`\\n\\n' +
                '**INSTRUCTIONS**:\\n' +
                '1. Read `CLAUDE.md` for project guidelines\\n' +
                '2. Read `current-task-context.json` for full sequential context\\n' +
                '3. Examine existing code to understand previous tasks implementations\\n' +
                '4. Implement this specific task building on existing changes\\n' +
                '5. Follow project conventions and best practices\\n' +
                '6. Create/modify all necessary files for this task\\n' +
                '7. Ensure code is production-ready with proper error handling\\n' +
                '8. Write tests if the project has testing infrastructure\\n\\n' +
                '**IMPORTANT SEQUENTIAL CONSIDERATIONS**:\\n' +
                '- You are working with cumulative changes from previous tasks\\n' +
                '- Focus only on implementing this specific task\\n' +
                '- Build upon and integrate with existing code from previous tasks\\n' +
                '- Do not redo work from previous tasks unless necessary for integration\\n' +
                '- Your changes will be reviewed as part of a stacked PR system\\n\\n' +
                '**WORKFLOW INTEGRATION**: This comment was automatically created by Sequential Task Executor. Once you complete this task, the system will automatically create a PR and trigger the next task if applicable.';

              const { data: comment } = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentIssue,
                body: claudeInstructions
              });
              
              console.log(`‚úÖ Created Claude Code trigger comment #${comment.id} on issue #${parentIssue}`);
              console.log(`ü§ñ Claude Code Action should now be triggered via issue_comment event`);
              
              core.setOutput('claude_comment_id', comment.id);
              core.setOutput('claude_triggered', 'true');
              
            } catch (error) {
              console.log('‚ùå Failed to trigger Claude Code implementation:', error.message);
              core.setFailed(`Failed to trigger Claude Code: ${error.message}`);
            }

      - name: Wait for Claude Code completion
        if: steps.prepare-task.outputs.task_prepared == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('‚úÖ Task preparation complete and Claude Code triggered');
            console.log('‚è≥ Waiting for Claude Code Action to implement the task...');
            console.log('üìã Task completion will be handled by a separate workflow triggered by Claude Code Action');
            console.log('üîó Monitor progress in the issue thread and watch for the next sequential task to trigger automatically');

      - name: Upload task artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sequential-task-${{ steps.prepare-task.outputs.task_number || 'unknown' }}-artifacts
          path: |
            current-task-context.json
          retention-days: 30