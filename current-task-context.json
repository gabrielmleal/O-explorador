{
  "taskData": {
    "id": 1,
    "title": "Create bear sprite image for the enemy",
    "body": "Create or prepare the bear sprite image file that will be used for the bear enemy. Since creating actual artwork may be difficult, this task will focus on either: 1) Creating a simple bear sprite file, or 2) Using a temporary mock/placeholder image based on the existing wolf sprite but modified to represent a bear. The sprite should follow the same format as existing enemies (LoboCinza.gif and LoboVermelho.gif) with frames for idle and walking animations. The image should be saved as 'Urso.gif' or 'Bear.gif' in the /src/Imagens/ directory, maintaining the same sprite sheet layout as existing enemies (idle frame on top row, walking frames on bottom row).",
    "status": "in-progress",
    "branch": "sequential/task-1",
    "pr_number": null,
    "created_at": "2025-08-10T01:38:54.899Z",
    "completed_at": null,
    "error_message": null
  },
  "taskIndex": 0,
  "totalTasks": 3,
  "previousBranch": "main",
  "currentBranch": "sequential/task-1",
  "parentIssue": 91,
  "sequentialContext": "## ðŸ“‹ Project Context for Sequential Implementation\n\n### Overview\n<!-- Provide a high-level description of what needs to be built or accomplished -->\nI want to create a new enemy bear. This enemy will have more health points than the wolf, but it will have a slower speed.\n\n### Detailed Requirements\n<!-- List specific requirements, features, or functionality needed -->\n<!-- Note: These will be implemented sequentially, with each task building on the previous -->\n\n1. Create the bear class itself in the files\n2. Add 1 bear at the end of the level 1, close to the ending portal\n\n### Technical Specifications\n<!-- Include any technical details, constraints, or preferences -->\n\n- **Technology Stack: follow the stack that already exists**\n- **Architecture Pattern: follow the architecture that already exists**\n- **Performance Requirements: it is not important, so you can do as you want**\n- **Security Requirements: it is not important, so you can do as you want**\n\n### Sequential Implementation Considerations\n<!-- How should tasks build on each other? -->\n\n- **Task Dependencies: The task to create the bear class depends on the bear image. The task to position the bear in the map depends on the class creation. ** <!-- Which tasks depend on others? -->\n- **Logical Ordering: create the bear image -> create the bear class -> add the bear on level 1** <!-- What's the best sequence for implementation? -->\n- **Integration Points:** <!-- Where do tasks need to integrate with each other? -->\n\n### User Stories\n<!-- Optional: Include user stories if applicable -->\n\nAs a bear, I want to go back and forward on the map so that I can damage the user if we collide.\n\n### Success Criteria\n<!-- Define what success looks like for this project -->\n\n- The new enemy bear can be placed anywhere in the levels and working properly with the same mechanism as the wolf, doing damage to the user, and also receiving damage if attacked\n- The bear is interacting with the map, user, and every object successfully\n\n\n### Constraints and Assumptions\n<!-- List any constraints, limitations, or assumptions -->\n\n**Constraints:**\n- If you find hard to create bear files due to limitations, just use a mock or a wolf sprite temporarily instead\n\n**Assumptions:**\n- \n\n### Dependencies\n<!-- List any external dependencies or prerequisites -->\n\n- \n\n### Timeline\n<!-- Optional: Include any timeline or deadline information -->\n\n- **Desired Completion Date:**\n- **Priority Level:** [Low/Medium/High/Critical]\n\n### Additional Context\n<!-- Any other relevant information, mockups, or references -->\n\n\n---\n\n## ðŸ”— Sequential Execution Settings\n\n### Task Generation Preferences\n<!-- Configure how sequential tasks should be generated -->\n\n- **Maximum number of tasks:** 10\n- **Preferred task complexity:** Low\n- **Sequential execution:** Yes (default)\n- **Task interdependencies:** Consider dependencies in ordering\n\n### Implementation Strategy\n<!-- Configure how sequential PRs should be created -->\n\n- **Stacked PRs:** Yes (each task builds on previous)\n- **Base branch strategy:** Previous task branch\n- **Create draft PRs:** No\n- **Request reviews from:** @gabrielmleal\n\n### Progress Monitoring\n<!-- Sequential execution provides enhanced monitoring -->\n\n- **Progress tracking:** Enabled (automatic)\n- **Parent issue updates:** Yes\n- **Recovery support:** Available via workflows\n\n### Labels to Apply\n<!-- Additional labels to apply to generated tasks -->\n\n- \n\n---\n\n## ðŸš€ How Sequential Execution Works\n\n**Note:** Once this issue is created with the `sequential-context` label, it will automatically:\n\n1. **Analyze Context:** Claude decomposes requirements into sequential tasks\n2. **Initialize State:** Creates state management for task chain tracking\n3. **Execute Sequentially:** Tasks run one at a time, each building on previous changes\n4. **Create Stacked PRs:** Each task creates a PR that branches from the previous task\n5. **Auto-Chain:** Next task automatically triggers when current task completes\n6. **Progress Updates:** Regular progress updates posted to this issue\n\n### Key Benefits:\n- âœ… **Progressive Building:** Each task has access to previous implementations\n- âœ… **Stacked PRs:** Clean, focused PRs that show incremental progress  \n- âœ… **Automatic Chaining:** No manual intervention needed between tasks\n- âœ… **Error Recovery:** Built-in recovery workflows for handling failures\n- âœ… **Full Context:** Later tasks understand and integrate with earlier work\n\n### Monitoring Progress:\n- Progress updates will appear in comments below\n- Each task will create a labeled PR (sequential-task, task-N)\n- Final summary posted when all tasks complete\n- Recovery workflows available if issues occur\n\n**Sequential execution is now starting...**\n\n@claude please, execute this context",
  "previousTasks": [],
  "stateCommentId": 3172290199
}