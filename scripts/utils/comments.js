const { STATE_COMMENT_PREFIX, STATE_COMMENT_SUFFIX, TRIGGERS } = require('./constants');

function createStateComment(state) {
  const stateJson = JSON.stringify(state, null, 2);
  return `${STATE_COMMENT_PREFIX}\n${stateJson}\n${STATE_COMMENT_SUFFIX}\n\n## 🤖 Sequential Tasks State\n\n**Do not modify this comment manually.**\n\n- **Status**: ${state.status}\n- **Current Task**: ${state.current_task_index + 1}/${state.tasks.length}\n- **Started**: ${state.started_at}\n- **Updated**: ${state.updated_at}`;
}

function createProgressComment(tasks) {
  return `## 🚀 Sequential Task Execution Started

Created ${tasks.length} tasks for sequential implementation:

${tasks.map((task, i) => `- [ ] **Task ${i + 1}**: ${task.title}`).join('\n')}

**Execution Strategy:**
- Tasks execute one at a time in order
- Each task builds on changes from previous tasks
- Each task creates a PR that stacks on the previous task's branch
- Next task automatically triggers when current task completes

*Sequential execution is now in progress...*`;
}

function createTaskTrigger(taskIndex, previousBranch, parentIssue, taskTitle) {
  return `${TRIGGERS.SEQUENTIAL_TASK} task_index=${taskIndex} previous_branch=${previousBranch} parent_issue=${parentIssue}

⚡ **Sequential Task ${taskIndex + 1} Starting**

@claude ${taskIndex === 0 ? 'Starting execution of Task 1' : `Task ${taskIndex} completed successfully. Automatically triggering next task in sequence.`}

**${taskIndex === 0 ? 'Task' : 'Next Task'} (${taskIndex + 1})**: ${taskTitle || 'Task title not available'}

*This is an automated trigger comment - the sequential workflow will now execute the ${taskIndex === 0 ? 'first' : 'next'} task.*`;
}

function createCompletionComment(tasksCount, tasks) {
  return `## 🎉 Sequential Task Execution Complete!

All ${tasksCount} tasks have been successfully implemented:

${tasks.map((task, i) => `- ✅ **Task ${i + 1}**: ${task.title} (PR #${task.pr_number || 'N/A'})`).join('\n')}

**Final Results:**
- 🔗 **${tasksCount} stacked PRs** created with progressive changes
- ⚡ **Sequential execution** completed successfully
- 📝 Each PR contains only its specific task changes
- 🏗️ Changes build progressively from task to task

*All PRs are ready for review and merging.*`;
}

function createPRBody(taskIndex, totalTasks, taskData, previousTasks, originalContext, parentIssue) {
  return `## Sequential Task ${taskIndex + 1} of ${totalTasks}

**Task**: ${taskData.title}

**Description**: ${taskData.body}

### Sequential Context

This PR is part of a sequential task execution chain:

${previousTasks.length > 0 ? `**Previous Tasks Completed:**
${previousTasks.map(t => `- ✅ Task ${t.id}: ${t.title}`).join('\n')}

**This PR builds on:** Changes from Task ${taskIndex}` : '**First Task:** This is the first task in the sequence, building from main branch'}

${taskIndex + 1 < totalTasks ? `**Next Task:** Task ${taskIndex + 2} will automatically trigger after this PR is created` : '🎉 **Final Task:** This is the last task in the sequence!'}

### Original Context

${originalContext}

### Testing

- [ ] Code has been tested locally
- [ ] All tests pass  
- [ ] No linting errors
- [ ] Changes are compatible with previous sequential tasks

---
*This PR was automatically generated by Claude Code Sequential Executor for Task ${taskIndex + 1}*
${parentIssue ? `\nRelated to: #${parentIssue}` : ''}`;
}

module.exports = {
  createStateComment,
  createProgressComment,
  createTaskTrigger,
  createCompletionComment,
  createPRBody
};