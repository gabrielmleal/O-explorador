const { execSync } = require('child_process');

module.exports = async ({ github, context, taskData, taskId, issueNumber }) => {
  
  // Check if any files were modified
  const status = execSync('git status --porcelain', { encoding: 'utf8' });
  if (!status.trim()) {
    console.log('No changes made, updating task status to no-changes');
    
    // Update task issue status
    taskData.status = 'no-changes';
    
    // Get current issue body and update the task data JSON
    const { data: issue } = await github.rest.issues.get({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issueNumber
    });
    
    const updatedIssueBody = issue.body.replace(
      /```json\s*({\s*[\s\S]*?})\s*```/,
      `\`\`\`json\n${JSON.stringify(taskData, null, 2)}\n\`\`\``
    );
    
    await github.rest.issues.update({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issueNumber,
      body: updatedIssueBody
    });
    
    // Add a comment to indicate no changes were needed
    await github.rest.issues.createComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issueNumber,
      body: `‚ö†Ô∏è **No changes needed** - Claude determined that no changes were required for this task.`
    });
    
    return null; // No PR created
  }

  // Create branch
  const branchName = `claude/task-${taskId}-${issueNumber}`;
  execSync(`git config user.name "Claude Code Bot"`);
  execSync(`git config user.email "claude-bot@anthropic.com"`);
  execSync(`git checkout -b "${branchName}"`);
  
  // Commit changes
  execSync('git add -A');
  execSync(`git commit -m "Implement Task ${taskId}: ${taskData.title}

${taskData.body}

ü§ñ Generated with Claude Code
Co-authored-by: Claude <claude@anthropic.com>"`);
  
  // Push branch
  execSync(`git push origin "${branchName}"`);
  
  // Create PR
  const { data: pr } = await github.rest.pulls.create({
    owner: context.repo.owner,
    repo: context.repo.repo,
    title: `[Claude] Task ${taskId}: ${taskData.title}`,
    head: branchName,
    base: 'main',
    body: `## Summary

This PR implements Task ${taskId} from issue #${issueNumber}.

**Task**: ${taskData.title}

**Description**: ${taskData.body}

### Related Issue

Part of #${issueNumber}

### Testing

- [ ] Code has been tested locally
- [ ] All tests pass  
- [ ] No linting errors

${'---'}
*This PR was automatically generated by Claude Code for Task ${taskId}*`
  });
  
  // Update task status to completed
  taskData.status = 'completed';
  taskData.pr_number = pr.number;
  
  // Get current issue body and update the task data JSON
  const { data: completedIssue } = await github.rest.issues.get({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber
  });
  
  const updatedCompletedIssueBody = completedIssue.body.replace(
    /```json\s*({\s*[\s\S]*?})\s*```/,
    `\`\`\`json\n${JSON.stringify(taskData, null, 2)}\n\`\`\``
  );
  
  await github.rest.issues.update({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber,
    body: updatedCompletedIssueBody
  });

  // Add labels to PR
  await github.rest.issues.addLabels({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: pr.number,
    labels: ['claude-generated', 'needs-review', `task-${taskId}`]
  });

  // Add completion comment to task issue
  await github.rest.issues.createComment({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber,
    body: `‚úÖ **Task Complete** - This task has been implemented successfully.

üìã **PR Created**: #${pr.number}
üîÑ **Status**: Ready for review

This issue will be automatically closed when the PR is merged.`
  });

  console.log(`‚úÖ Successfully created PR #${pr.number} for Task ${taskId}`);
  return pr.number;
};