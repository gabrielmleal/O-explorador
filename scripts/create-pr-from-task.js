const { execSync } = require('child_process');

module.exports = async ({ github, context, taskData, taskId }) => {
  const issueNumber = context.payload.issue.number;
  
  // Check if any files were modified
  const status = execSync('git status --porcelain', { encoding: 'utf8' });
  if (!status.trim()) {
    console.log('No changes made, updating task status to no-changes');
    
    // Update task comment status
    taskData.status = 'no-changes';
    const updatedComment = `ü§ñ TASK-${taskId}: ${JSON.stringify(taskData, null, 2)}`;
    
    await github.rest.issues.updateComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      comment_id: context.payload.comment.id,
      body: updatedComment
    });
    
    // Comment on the main issue  
    await github.rest.issues.createComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issueNumber,
      body: `‚ö†Ô∏è **Task ${taskId} - No changes needed** - Claude determined that no changes were required for "${taskData.title}".`
    });
    
    return null; // No PR created
  }

  // Create branch
  const branchName = `claude/task-${taskId}-${issueNumber}`;
  execSync(`git config user.name "Claude Code Bot"`);
  execSync(`git config user.email "claude-bot@anthropic.com"`);
  execSync(`git checkout -b "${branchName}"`);
  
  // Commit changes
  execSync('git add -A');
  execSync(`git commit -m "Implement Task ${taskId}: ${taskData.title}

${taskData.body}

ü§ñ Generated with Claude Code
Co-authored-by: Claude <claude@anthropic.com>"`);
  
  // Push branch
  execSync(`git push origin "${branchName}"`);
  
  // Create PR
  const { data: pr } = await github.rest.pulls.create({
    owner: context.repo.owner,
    repo: context.repo.repo,
    title: `[Claude] Task ${taskId}: ${taskData.title}`,
    head: branchName,
    base: 'main',
    body: `## Summary

This PR implements Task ${taskId} from issue #${issueNumber}.

**Task**: ${taskData.title}

**Description**: ${taskData.body}

### Related Issue

Part of #${issueNumber}

### Testing

- [ ] Code has been tested locally
- [ ] All tests pass  
- [ ] No linting errors

${'---'}
*This PR was automatically generated by Claude Code for Task ${taskId}*`
  });
  
  // Update task status to completed
  taskData.status = 'completed';
  taskData.pr_number = pr.number;
  const updatedComment = `ü§ñ TASK-${taskId}: ${JSON.stringify(taskData, null, 2)}`;
  
  await github.rest.issues.updateComment({
    owner: context.repo.owner,
    repo: context.repo.repo,
    comment_id: context.payload.comment.id,
    body: updatedComment
  });

  // Add labels to PR
  await github.rest.issues.addLabels({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: pr.number,
    labels: ['claude-generated', 'needs-review', `task-${taskId}`]
  });

  // Update main issue with progress
  await github.rest.issues.createComment({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber,
    body: `‚úÖ **Task ${taskId} Complete** - "${taskData.title}" has been implemented.

üìã **PR Created**: #${pr.number}
üîÑ **Status**: Ready for review`
  });

  console.log(`‚úÖ Successfully created PR #${pr.number} for Task ${taskId}`);
  return pr.number;
};