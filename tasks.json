{
  "tasks": [
    {
      "title": "Create bear sprite image file",
      "body": "Create a bear sprite image file to be used for the new bear enemy. Since the requirement allows using a mock or wolf sprite temporarily if creating bear files is difficult due to limitations, this task will:\n\n1. Try to create a basic bear sprite image based on the existing wolf sprite format\n2. If image creation is not possible due to tool limitations, create a temporary bear sprite by copying the existing wolf sprite file\n3. The sprite should follow the same format as existing enemies:\n   - First row: standing sprite (30x30 pixels)\n   - Second row: walking animation frames (4 frames, 30x30 pixels each)\n   - Total image dimensions should match existing wolf sprites\n\n**Expected Output**: A bear sprite image file at `/src/Imagens/Urso.gif` (or equivalent) that can be loaded by the bear enemy class.\n\n**Success Criteria**: \n- Bear sprite image file exists and follows the same format as wolf sprites\n- Image can be loaded without errors in Java ImageIO\n- Sprite has proper dimensions (30x30 per frame) and frame layout"
    },
    {
      "title": "Create Urso (bear) enemy class",
      "body": "Create the Urso (bear) enemy class that extends the Inimigo base class. This task builds on the bear sprite image from the previous task and implements:\n\n1. Create `Urso.java` class in `/src/ObjetosDoMapa/` package\n2. Implement bear characteristics as specified:\n   - **Health**: Higher than both wolves (LoboCinza=3, LoboVermelho=6), set to 8 HP\n   - **Speed**: Slower than wolves (LoboCinza=0.8, LoboVermelho=1.3), set to 0.5\n   - **Damage**: Same as wolves, set to 1\n3. Load the bear sprite image created in the previous task\n4. Implement the same movement patterns and behavior as existing wolves:\n   - Walk back and forth on platforms\n   - Fall with gravity\n   - Collision detection with map boundaries\n   - Hit detection and damage handling\n   - Death animation using explosion sprite\n5. Use the same animation system as wolves for standing and walking states\n\n**Expected Output**: A fully functional `Urso.java` class file that integrates with the existing enemy system.\n\n**Success Criteria**: \n- Urso class extends Inimigo and compiles without errors\n- Bear has correct stats (health=8, speed=0.5, damage=1)\n- Bear loads sprite image and displays correctly\n- Bear exhibits proper movement and collision behavior\n- Bear can be damaged and destroyed like other enemies"
    },
    {
      "title": "Add bear to level 1 near the ending portal",
      "body": "Add one bear enemy at the end of level 1, close to the ending portal. This task builds on the Urso class created in the previous task and integrates it into the game level:\n\n1. Import the new Urso class in `Estado_Level1.java`\n2. Add bear instantiation in the `inicializaMonstros()` method\n3. Position the bear near the ending portal (which is at position 4875, 165)\n4. Place the bear at a strategic location close to the portal:\n   - X position: around 4750-4800 (close to but before the portal)\n   - Y position: appropriate for the ground level (around 165-200)\n5. Add the bear to the inimigos ArrayList so it gets updated and drawn\n6. Ensure the bear follows the same lifecycle as other enemies:\n   - Gets updated in the game loop\n   - Can be damaged by player attacks\n   - Creates explosion effect when destroyed\n   - Is removed from the list when dead\n\n**Expected Output**: Level 1 now contains one bear enemy positioned near the ending portal.\n\n**Success Criteria**: \n- Bear appears in level 1 near the ending portal\n- Bear is fully interactive (moves, can be attacked, damages player on contact)\n- Bear integrates seamlessly with existing enemy system\n- Game compiles and runs without errors\n- Bear provides appropriate challenge near the level end"
    }
  ]
}